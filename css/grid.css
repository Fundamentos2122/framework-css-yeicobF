/* ------------------------------- Contenedor. ------------------------------ */
/* Contenedor de todo el contenido de la página. */
.container,
/**
 * Esta clase de .container-fluid ocupa todo el ancho. En el caso del 
 * ".container" no ocupará todo el espacio, ya que está afectada por las media 
 * queries que definimos, pero ".container-fluid" no tiene media queries que 
 * modifiquen su tamaño, por lo que se puede definir aquí mismo.
 * 
 * Solo tendremos que poner el nombre de la clase en la etiqueta y se aplicará 
 * este estilo, el cual ocupará todo el tamaño de la pantalla. Esto es por si 
 * no quieres que quede centardo en la pantalla y ocupe todo el espacio.
 * */
.container-fluid,
/* 
 * - Tendremos clases que definirán tamaños del contenedor, las cuales se irán 
 * concatenando en las media queries conforme vaya aumentando el tamaño:
 *    - .container-sm (small)
 *    - .container-md (medium)
 *    - .container-lg (large)
 *    - .container-xl (extra large)
 * 
 * Estas se irán poniendo conforme vayan ocupando su respectivo tamaño.
 * 
 * - Esto sirve para indicar en mi código que le aplique un tipo de contenedor. 
 * A partir de un punto, solo ocupará el tamaño máximo del contenedor, sin 
 * superar la medida del tipo de contenedor elegido.
 * 
 * - Esto nos puede servir para combinar con la clase "container-fluid", por lo 
 * que seguirá ocupando el ancho máximo, y cuando se llegue a la medida máxima 
 * del "container-tamaño", dejará de ser ".container-fluid" y comience a tener 
 * márgenes a los costados, dependiendo del tamaño definido.
 */
.container-sm, .container-md, .container-lg, .container-xl {
  width: 100%;
  padding: 0 var(--container-padding);
  /**
   * Centramos el contenedor, ya que no ocupará todo el tamaño de la pantalla.
   * 
   * Margen de 0 arriba y abajo, y auto a los lados para que siempre esté 
   * centrado verticalmente.
   */
  margin: 0 auto;
}

/* ------------------ MEDIA QUERIES PARA DISEÑO RESPONSIVO ------------------ */

/**
 * Cuando hacemos un diseño de página web, debemos de tener el principal motivo 
 * para la que se hará el sitio. Es decir, los tamaños más comunes, la 
 * orientación del viewport (horizontal: ancho más grande que el alto, 
 * vertical: más alto que ancho - más recurrente en un dispositivo móvil - 
 * tablet, teléfono).
 * 
 * A partir de esto, se va a plantear el diseño.
 * 
 * Al incio, se comenzó a hacer todo principalmente en computadoras primero, ya 
 * que existieron antes que los smartphones, pero ahora existe un diseño 
 * llamado "mobile first", el cual se trabaja en el Framework más popular de 
 * CSS: Bootstrap. En este enfoque se trabaja primero con lo más pequeño, 
 * avanzando hasta lo más grande.
 * 
 * - En este caso podremos el diseño para 3 tamaños de pantalla, aunque en el 
 * proyecto solo tendremos que hacer 2: pantalla grande y pantalla pequeña.
 * 
 * Cuando los tamaños de las pantallas son más grandes, se basan en el principio de que el diseño no abarca toda la pantalla.
*/

/** 
 * Cuando pase de 576px. 
 * 
 * - Tamaño para dispositivo pequeño como un smartphone.
 * 
 * - Los tamaños qeu se establecen para el contenedor son por las medidas del 
 * padding y elementos así, por lo que así las definió el profe.
 */
@media (min-width: 576px) {
  .container,
  .container-sm {
    max-width: 540px;
  }
}

/** 
 * Cuando pase de los 768px.
 * Tamaño para dispositivos como Tablet.
*/
@media (min-width: 768px) {
  .container,
  .container-sm,
  .container-md {
    max-width: 720px;
  }
}

/**
 * Cuando pase de los 992px.
 * 
 * Para un dispositivo más grande. Esto puede variar dependiendo del tamaño del 
 * monitor, por ejemplo: una laptop, a comparación de una computadora de 
 * escritorio.
 */
@media (min-width: 992px) {
  .container,
  .container-sm,
  .container-md,
  .container-lg {
    max-width: 960px;
  }
}

/**
 * Para un dispositivo aún más grande. 
 * 
 * Bootstrap tiene un principio en el que se basan muchas páginas, que es en 
 * donde no tienes que abarcar todo el tamaño de la pantalla, sino que cuando ya 
 * es muy grande, el contenido se puede centrar en esta.
 */

@media (min-width: 1200px) {
  .container,
  .container-sm,
  .container-md,
  .container-lg,
  .container-xl {
    max-width: 1140px;
  }
}

/* ----------------------------------- ROW ---------------------------------- */

/** 
 * A pesar de que utilizaremos el modelo de malla, utilizaremos Flexbox, ya que 
 * es más versatil.
 *  */
.row {
  /* Ya cada columna no ocupa un renglón, sino que se van a amontonar. */
  display: flex;
  /** 
   * Si el tamaño de las columnas y su suma sobrepasa el tamaño máximo de las 
   * 12 columnas, se hará un overflow, por lo que se producirá un scroll. Esto 
   * se puede solucionar poniendo un flex-wrap.
   * 
   * - Si se sobrepasa el tamaño, entonces se pasará el elemento a la siguiente 
   * línea.
   * 
   * - No deberíamos tener scroll horizontal en CASI NINGÚN CASO.
  */
  flex-wrap: wrap;

  /** 
   * Agregar un margen negativo para acomodar /alinear los elementos junto a 
   * los demás que están dentro del container, debido a que hay un padding 
   * aplicado en general, y los elementos de la clase .row no quedan alineados 
   * en el mismo eje.
   * 
   * - Me imagino que esto también se podría hacer con una pseudo-clase o algo 
   * así, por ejemplo:
   * 
   *    .container :not(.row) { padding: 0 1em; }
   * 
   * 
   */

  /**
   *  Podemos hacer que el padding sea una variable. De esta manera, todos los 
   * elementos que dependen de este valor, podrán obtenerlo con la variable en 
   * lugar de modificar manualmente cada uno de estos valores.
   * */
  margin: 0 calc(-1 * var(--container-padding));
}

/**
 *  Esto no va dentro del framework, pero nos ayudará a visualizar. 
 * 
 * - Así podemos ver cada uno de los elementos y el espacio que ocupa.
 * */
/* .row > * {
  border: black 1px solid;
} */

/* -------------------------------- COLUMNAS -------------------------------- */
/**
 * Partiendo de la lógica de que la pantalla estará dividida en 12 secciones, 
 * cada sección utilizará una 12va parte del 100%.
 * 
 * - Nos vamos a basar en el porcentaje de la pantalla o viewport.
 * */

/* Selector para dar padding a todos los elemementos. */

/**
 * Podríamos utilizar el selector en el cual el valor comienza con una cadena, 
 * pero entonces si comenzamos con otra clase distinta, no aplicaría. Pero, en 
 * caso de que fuera así, entonces podría ser lo siguiente:
 * 
 * [class^="col-"] {}
 * */
.col, .col-auto, .col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8,
.col-9, .col-10, .col-11, .col-12,
/* ---------------------------------- SMALL --------------------------------- */
.col-sm, .col-sm-auto, .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, 
.col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12, 
/* --------------------------------- MEDIUM --------------------------------- */
.col-md, .col-md-auto, .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, 
.col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12, 
/* ---------------------------------- LARGE --------------------------------- */
.col-lg, .col-lg-auto, .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, 
.col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12, 
/* ------------------------------- EXTRA LARGE ------------------------------ */
.col-xl, .col-xl-auto, .col-xl-1, .col-xl-2, .col-xl-3, .col-xl-4, .col-xl-5, 
.col-xl-6, .col-xl-7, .col-xl-8, .col-xl-9, .col-xl-10, .col-xl-11, .col-xl-12 {
  position: relative;
  padding: 0 var(--container-padding);
}

/** 
 * Columna que no tiene tamaño ni tamaño automático, sino que se ajustará al 
 * contenido, al ancho restante.
 * 
 * - No importa si la pones antes o después, va a seguir ocupando el tamaño 
 * restante. 
 * */
.col {
  /** 
   * Factor de crecimiento: flex-grow;
   * - Con "1" hacemos que crezca con todo el tamaño restante.
   * - Con "0" ocuparía el mismo tamaño que los demás.
   * */
  flex-grow: 1;

  /**
   * Hay que dar un
   *      flex-basis: 0;
   * para que el tamaño inicial del elemento sea 0, ya que no sabemos cuánto 
   * podrá medir.
  */
  flex-basis: 0;

  /**
   * El equivalente de las propiedades definidas con anterioridad:
   * 
   * - flex-grow: 1;
   * - flex-basis: 0;
   * 
   * es:
   * 
   * - flex: flex-grow flex-shrink flex-basis;
   * - flex: 1 0 0;
    */

  /** 
  * Poniendo el tamaño máximo para que no pueda superar el tamaño del 
  * contenedor padre. Con las demás propiedades ya tomaría el tamaño restante.
  */
  max-width: 100%;
}

/**
 * Con un guión indicaremos el número de secciones que queramos que abarque 
 * ese elemento. 
 * 
 * `.col-1` -> Ocupar 1 columna.
 * `.col-2` -> Ocupar 2 columna.
 * `.col-n` -> Ocupar n columnas.
 * 
 * - La ventaja de estas columnas es que siempre serán flexibles y adaptables 
 * al contenido y tamaño del navegador. Aunque es cierto que a veces de tan 
 * pequeña que se hace la pantalla, los elementos ya no se ven bien o el 
 * texto/contenido se puede salir.
 * 
 * - En diseño móvil no se utilizan todas las 12 secciones, por lo que esto no 
 * suele suceder.
 * */
.col-1 {
  /** 
   * - flex-grow: Qué tanto va a crecer un elemento respecto a los demás que 
   * están dentro del contenedor. Sirve para crecer.
   * 
   * - flex-shrink: Para que el elemento decrezca.
   * 
   * - flex-basis: Tamaño inicial que tendrá el elemento. En este caso, indicaremos que se trata de una 12va parte del 100%.
   * */

  /* flex: flex-grow flex-shrink flex-basis;*/
  /* 8.3333 con 4 dígitos, siendo este el 1/12 porcentaje del 100%. */
  flex: 0 0 8.3333%;

  /* Ancho máximo para que no se pueda superar el tamaño designado. */
  max-width: 8.3333%;
}

.col-2 {
  flex: 0 0 16.6667%;
  max-width: 16.6667%;
}

.col-3 {
  flex: 0 0 25%;
  max-width: 25%;
}
.col-4 {
  flex: 0 0 33.3333%;
  max-width: 33.3333%;
}

.col-5 {
  flex: 0 0 41.6667%;
  max-width: 41.6667%;
}

.col-6 {
  flex: 0 0 50%;
  max-width: 50%;
}
.col-7 {
  flex: 0 0 58.3333%;
  max-width: 58.3333%;
}
.col-8 {
  flex: 0 0 66.6667%;
  max-width: 66.6667%;
}
.col-9 {
  flex: 0 0 75%;
  max-width: 75%;
}
.col-10 {
  flex: 0 0 83.3333%;
  max-width: 83.3333%;
}
.col-11 {
  flex: 0 0 91.6667%;
  max-width: 91.6667%;
}
.col-12 {
  flex: 0 0 100%;
  max-width: 100%;
}

/* ----------- COL AUTO: Ajustar columna al tamaño del contenido. ----------- */

/* Hacer que el tamaño de la columna se ajuste al contenido. */
.col-auto {
  /** 
   * Tanto para flex-grow como para flex-shrink pondremos 0, pero para
   * flex-basis hay que darle un auto, para que se ajuste automáticamente al 
   * contenido.
   * */
  /* flex-basis: auto; */
  flex: 0 0 auto;

  width: auto;
  /* Que no supere el ancho total del contenedor */
  max-width: 100%;
}

/* -------------------- MEDIA QUERIES PARA COLUMNAS (col) ------------------- */

/** 
 * Cuando pase de 576px. 
 * 
 * - Tamaño para dispositivo pequeño como un smartphone.
 * 
 * - Los tamaños qeu se establecen para el contenedor son por las medidas del 
 * padding y elementos así, por lo que así las definió el profe.
 */
@media (min-width: 576px) {
  .col-sm {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }

  .col-sm-1 {
    flex: 0 0 8.3333%;
    max-width: 8.3333%;
  }

  .col-sm-2 {
    flex: 0 0 16.6667%;
    max-width: 16.6667%;
  }

  .col-sm-3 {
    flex: 0 0 25%;
    max-width: 25%;
  }
  .col-sm-4 {
    flex: 0 0 33.3333%;
    max-width: 33.3333%;
  }

  .col-sm-5 {
    flex: 0 0 41.6667%;
    max-width: 41.6667%;
  }

  .col-sm-6 {
    flex: 0 0 50%;
    max-width: 50%;
  }
  .col-sm-7 {
    flex: 0 0 58.3333%;
    max-width: 58.3333%;
  }
  .col-sm-8 {
    flex: 0 0 66.6667%;
    max-width: 66.6667%;
  }
  .col-sm-9 {
    flex: 0 0 75%;
    max-width: 75%;
  }
  .col-sm-10 {
    flex: 0 0 83.3333%;
    max-width: 83.3333%;
  }
  .col-sm-11 {
    flex: 0 0 91.6667%;
    max-width: 91.6667%;
  }
  .col-sm-12 {
    flex: 0 0 100%;
    max-width: 100%;
  }

  /* Hacer que el tamaño de la columna se ajuste al contenido. */
  .col-sm-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: 100%;
  }
}

/** 
 * Cuando pase de los 768px.
 * Tamaño para dispositivos como Tablet.
*/
@media (min-width: 768px) {
  .col-md {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }

  .col-md-1 {
    flex: 0 0 8.3333%;
    max-width: 8.3333%;
  }

  .col-md-2 {
    flex: 0 0 16.6667%;
    max-width: 16.6667%;
  }

  .col-md-3 {
    flex: 0 0 25%;
    max-width: 25%;
  }
  .col-md-4 {
    flex: 0 0 33.3333%;
    max-width: 33.3333%;
  }

  .col-md-5 {
    flex: 0 0 41.6667%;
    max-width: 41.6667%;
  }

  .col-md-6 {
    flex: 0 0 50%;
    max-width: 50%;
  }
  .col-md-7 {
    flex: 0 0 58.3333%;
    max-width: 58.3333%;
  }
  .col-md-8 {
    flex: 0 0 66.6667%;
    max-width: 66.6667%;
  }
  .col-md-9 {
    flex: 0 0 75%;
    max-width: 75%;
  }
  .col-md-10 {
    flex: 0 0 83.3333%;
    max-width: 83.3333%;
  }
  .col-md-11 {
    flex: 0 0 91.6667%;
    max-width: 91.6667%;
  }
  .col-md-12 {
    flex: 0 0 100%;
    max-width: 100%;
  }

  /* Hacer que el tamaño de la columna se ajuste al contenido. */
  .col-md-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: 100%;
  }
}

/**
 * Cuando pase de los 992px.
 * 
 * Para un dispositivo más grande. Esto puede variar dependiendo del tamaño del 
 * monitor, por ejemplo: una laptop, a comparación de una computadora de 
 * escritorio.
 */
@media (min-width: 992px) {
  .col-lg {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }

  .col-lg-1 {
    flex: 0 0 8.3333%;
    max-width: 8.3333%;
  }

  .col-lg-2 {
    flex: 0 0 16.6667%;
    max-width: 16.6667%;
  }

  .col-lg-3 {
    flex: 0 0 25%;
    max-width: 25%;
  }
  .col-lg-4 {
    flex: 0 0 33.3333%;
    max-width: 33.3333%;
  }

  .col-lg-5 {
    flex: 0 0 41.6667%;
    max-width: 41.6667%;
  }

  .col-lg-6 {
    flex: 0 0 50%;
    max-width: 50%;
  }
  .col-lg-7 {
    flex: 0 0 58.3333%;
    max-width: 58.3333%;
  }
  .col-lg-8 {
    flex: 0 0 66.6667%;
    max-width: 66.6667%;
  }
  .col-lg-9 {
    flex: 0 0 75%;
    max-width: 75%;
  }
  .col-lg-10 {
    flex: 0 0 83.3333%;
    max-width: 83.3333%;
  }
  .col-lg-11 {
    flex: 0 0 91.6667%;
    max-width: 91.6667%;
  }
  .col-lg-12 {
    flex: 0 0 100%;
    max-width: 100%;
  }

  /* Hacer que el tamaño de la columna se ajuste al contenido. */
  .col-lg-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: 100%;
  }
}

/**
 * Para un dispositivo aún más grande. 
 * 
 * Bootstrap tiene un principio en el que se basan muchas páginas, que es en 
 * donde no tienes que abarcar todo el tamaño de la pantalla, sino que cuando 
 * ya es muy grande, el contenido se puede centrar en esta.
 */

@media (min-width: 1200px) {
  .col-xl {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }

  .col-xl-1 {
    flex: 0 0 8.3333%;
    max-width: 8.3333%;
  }

  .col-xl-2 {
    flex: 0 0 16.6667%;
    max-width: 16.6667%;
  }

  .col-xl-3 {
    flex: 0 0 25%;
    max-width: 25%;
  }
  .col-xl-4 {
    flex: 0 0 33.3333%;
    max-width: 33.3333%;
  }

  .col-xl-5 {
    flex: 0 0 41.6667%;
    max-width: 41.6667%;
  }

  .col-xl-6 {
    flex: 0 0 50%;
    max-width: 50%;
  }
  .col-xl-7 {
    flex: 0 0 58.3333%;
    max-width: 58.3333%;
  }
  .col-xl-8 {
    flex: 0 0 66.6667%;
    max-width: 66.6667%;
  }
  .col-xl-9 {
    flex: 0 0 75%;
    max-width: 75%;
  }
  .col-xl-10 {
    flex: 0 0 83.3333%;
    max-width: 83.3333%;
  }
  .col-xl-11 {
    flex: 0 0 91.6667%;
    max-width: 91.6667%;
  }
  .col-xl-12 {
    flex: 0 0 100%;
    max-width: 100%;
  }

  /* Hacer que el tamaño de la columna se ajuste al contenido. */
  .col-xl-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: 100%;
  }
}
